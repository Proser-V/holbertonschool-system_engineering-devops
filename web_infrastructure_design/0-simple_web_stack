How it works

1. The user types www.foobar.com into their browser.
2. The browser dose not know where www.foobar.com is? It only understands IP addresses, so the browser asks the DNS system : "What is the IP address of www.foobar.com?"
    -> "www" is an address record mapping a name (like www.foobar.com) to an IP address of a server (like 8.8.8.8).
    -> DNS system replies "www.foobar.com = 8.8.8.8"
3. Now the browser knows that the wabsite lives at server 8.8.8.8 and sends an HTTP request to it.
4. The request first reaches the web server (Nginx). The role of the web server is to handle HTTP requests, serve static files liake images or CSS, and forward dynamic requests to the application server.
5. The application server then runs the code base (application files) that powers the website.
6. If the application needs to store or retrieve information, it communicates with the MySQL database (that stores the site's data).
7. The application server then generates a response (like JSON, etc...), sends it back to Nginx, and Nginx delivers it to the user's browser.
8. The user can now see the website.


Components

Server : machine at 8.8.8.8 running the stack
Domain name : foobar.com with "www" record pointing to 8.8.8.8
DNS record : "www" is a Address record
Web server : Nginx, serves HTTP and static content
Application server : runs the code
Application files : source code of the website
Database : MySQL toring website data
Communication : HTTP/HTTPS over TCP/IP


Issues with this infrastructure

1. SPOF (Single Point of Failure): If the server goes down, the website is completely unavailable.
2. Downtime during maintenance: Restarting Nginx or deploying new code causes outages.
3. No scalability: cannot handle high traffic on one server.
